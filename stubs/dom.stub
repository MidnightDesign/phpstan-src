<?php

class DOMDocument
{

	/** @var DOMDocumentType|null */
	public $doctype;

	/** @var DOMElement|null */
	public $documentElement;

	/** @var null */
	public $ownerDocument;

	/**
	 * @param string $name
	 * @return DOMNodeList<DOMElement>
	 */
	public function getElementsByTagName ($name) {}

	/**
	 * @param string $namespaceURI
	 * @param string $localName
	 * @return DOMNodeList<DOMElement>
	 */
	public function getElementsByTagNameNS ($namespaceURI, $localName) {}

}

class DOMNode
{

	/**
	 * @var DOMNamedNodeMap<DOMAttr>|null
	 */
	public $attributes;

	/**
	 * @phpstan-assert-if-true =DOMNamedNodeMap<DOMAttr> $this->attributes
	 * @return bool
	 */
	public function hasAttributes() {}

}

class DOMElement extends DOMNode
{

	/** @var DOMNamedNodeMap<DOMAttr> */
	public $attributes;

	/**
	 * @param string $name
	 * @return DOMNodeList<DOMElement>
	 */
	public function getElementsByTagName ($name) {}

	/**
	 * @param string $namespaceURI
	 * @param string $localName
	 * @return DOMNodeList<DOMElement>
	 */
	public function getElementsByTagNameNS ($namespaceURI, $localName) {}

}

/**
 * @template-covariant TNode as DOMNode
 * @implements IteratorAggregate<int, TNode>
 */
class DOMNodeList implements IteratorAggregate, Countable
{

	/**
	 * @param int $index
	 * @return TNode|null
	 */
	public function item ($index) {}

}

class DOMXPath
{

    /**
     * @param string $expression
     * @param DOMNode|null $contextNode
     * @param boolean $registerNodeNS
     * @return DOMNodeList<DOMNode>|false
     */
    public function query($expression, $contextNode, $registerNodeNS) {}

}

class DOMAttr extends DOMNode
{

}

class DOMProcessingInstruction
{

	/**
	 * @var string
	 */
	public $target;

	/**
	 * @var string
	 */
	public $data;

}

/**
 * @template-covariant TNode as DOMNode
 * @implements IteratorAggregate<int, TNode>
 *
 * @property-read int $length
 */
class DOMNamedNodeMap implements IteratorAggregate, Countable
{
	/**
	 * @return Iterator<TNode>
	 */
	public function getIterator(): Iterator {}

	/**
	 * @param string $qualifiedName
	 * @return TNode|null
	 */
	public function getNamedItem($qualifiedName): ?DOMNode {}

	/**
	 * @param string|null $namespace
	 * @param string $localName
	 * @return TNode|null
	 */
	public function getNamedItemNS($namespace, $localName): ?DOMNode {}

	/**
	 * @param int $index
	 * @return TNode|null
	 */
	public function item($index): ?DOMNode {}
}

class DOMText
{

	/** @var string */
	public $wholeText;

}
